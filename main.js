/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PenModePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  logLevel: "warn",
  isActive: false
};
var PenModePlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.isActive = false;
    this.previousVimModeState = false;
  }
  /**
   * Helper method to get the active editor using obsidian api
   * @returns active editor or null if none exists
   */
  getActiveEditor() {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    return (view == null ? void 0 : view.editor) || null;
  }
  async onload() {
    await this.loadSettings();
    this.logger = new Logger(this.settings.logLevel);
    this.boundKeydownHandler = this.handleKeydown.bind(this);
    this.statusBarItem = this.addStatusBarItem();
    this.statusBarItem.style.display = "none";
    this.addCommand({
      id: "toggle-pen-mode",
      name: "Toggle Pen Mode",
      callback: () => this.togglePenMode(),
      hotkeys: []
    });
    this.addSettingTab(new PenModeSettingTab(this.app, this));
    if (this.settings.isActive) {
      this.isActive = true;
      this.enablePenMode();
      this.updateStatusBar();
    }
    this.logger.info("Pen mode plugin loaded");
  }
  onunload() {
    if (this.isActive) {
      this.disablePenMode();
    }
    this.logger.info("Pen mode plugin unloaded");
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  togglePenMode() {
    this.isActive = !this.isActive;
    if (this.isActive) {
      this.enablePenMode();
    } else {
      this.disablePenMode();
    }
    this.settings.isActive = this.isActive;
    this.saveSettings();
    this.updateStatusBar();
    new import_obsidian.Notice(`Pen Mode ${this.isActive ? "enabled" : "disabled"}`);
    this.logger.info(`Pen Mode ${this.isActive ? "enabled" : "disabled"}`);
  }
  /**
   * Read the Obsidian config file
   * @returns Promise with the config object
   */
  async readObsidianConfig() {
    try {
      const configPath = (0, import_obsidian.normalizePath)(
        `${this.app.vault.configDir}/app.json`
      );
      const configData = await this.app.vault.adapter.read(configPath);
      return JSON.parse(configData);
    } catch (error) {
      this.logger.error("Error reading Obsidian config: ", error);
      throw new Error("Failed to read Obsidian config");
    }
  }
  /**
   * Write to the Obsidian config file
   * @param config The config object to write
   */
  async writeObsidianConfig(config) {
    try {
      const configPath = (0, import_obsidian.normalizePath)(
        `${this.app.vault.configDir}/app.json`
      );
      const configData = JSON.stringify(config, null, 2);
      await this.app.vault.adapter.write(configPath, configData);
    } catch (error) {
      this.logger.error("Error writing Obsidian config:", error);
      throw new Error("Failed to write Obsidian config");
    }
  }
  /**
   * Set Vim mode to a specific state
   * @param enableVim Whether to enable or disable Vim mode
   */
  async setVimMode(enableVim) {
    try {
      const config = await this.readObsidianConfig();
      this.previousVimModeState = config.vimMode;
      config.vimMode = enableVim;
      await this.writeObsidianConfig(config);
      this.logger.info(`Vim mode ${enableVim ? "enabled" : "disabled"}`);
    } catch (error) {
      this.logger.error("Error setting up Vim mode:", error);
      new import_obsidian.Notice("Failed to update vim mode settings");
    }
  }
  async enablePenMode() {
    this.statusBarItem.style.display = "block";
    try {
      const config = await this.readObsidianConfig();
      this.previousVimModeState = config.vimMode;
      if (config.vimMode) {
        config.vimMode = false;
        await this.writeObsidianConfig(config);
        this.logger.info("Vim mode disabled for Pen Mode");
      }
    } catch (error) {
      this.logger.error(
        "Error handling Vim mode when enabling Pen Mode:",
        error
      );
      new import_obsidian.Notice("Failed to update Vim mode settings");
    }
    this.addEditorVisualIndicator();
    document.removeEventListener("keydown", this.boundKeydownHandler, true);
    document.addEventListener("keydown", this.boundKeydownHandler, true);
    this.logger.info(
      "Keyboard event handler registered with capture phase"
    );
    this.registerDomEvent(
      document,
      "keydown",
      this.boundKeydownHandler,
      true
    );
  }
  async disablePenMode() {
    this.statusBarItem.style.display = "none";
    this.removeEditorVisualIndicator();
    document.removeEventListener("keydown", this.boundKeydownHandler, true);
    try {
      const config = await this.readObsidianConfig();
      if (config.vimMode !== this.previousVimModeState) {
        config.vimMode = this.previousVimModeState;
        await this.writeObsidianConfig(config);
        this.logger.info(
          `Vim mode restored to ${this.previousVimModeState ? "enabled" : "disabled"}`
        );
      }
    } catch (error) {
      this.logger.error("Error restoring vim mode:", error);
      new import_obsidian.Notice("Failed to restore vim mode settings");
    }
  }
  addEditorVisualIndicator() {
    const editorEl = document.querySelector(".cm-editor");
    if (editorEl) {
      editorEl.classList.add("pen-mode-active");
      const existingStyle = document.getElementById("pen-mode-style");
      if (!existingStyle) {
        const style = document.createElement("style");
        style.id = "pen-mode-style";
        style.textContent = `
					.pen-mode-active {
						border: 2px solid rgba(120, 160, 255, 0.4) !important;
						background-color: rgba(120, 160, 255, 0.05) !important
					}
				`;
        document.head.appendChild(style);
      }
    }
  }
  removeEditorVisualIndicator() {
    document.querySelectorAll(".cm-editor").forEach((el) => {
      el.classList.remove("pen-mode-active");
    });
  }
  updateStatusBar() {
    this.statusBarItem.empty();
    (0, import_obsidian.setIcon)(this.statusBarItem, "pencil");
    this.statusBarItem.createSpan({ text: " Pen Mode" });
  }
  handleKeydown(event) {
    if (!this.isActive)
      return;
    const disabledKeys = [
      "ArrowUp",
      "ArrowDown",
      "ArrowRight",
      "Delete",
      "Backspace",
      "PageUp",
      "PageDown"
    ];
    if (disabledKeys.includes(event.key)) {
      event.preventDefault();
      event.stopPropagation();
      this.logger.debug(`Prevented key: ${event.key}`);
      return;
    }
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      this.strikethroughLastWord();
      this.logger.debug("Strikethrough applied");
    }
  }
  strikethroughLastWord() {
    const editor = this.getActiveEditor();
    if (!editor)
      return;
    try {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const beforeCursor = line.slice(0, cursor.ch);
      if (this.hasNearbyStrikethroughMarkers(beforeCursor)) {
        this.logger.debug(
          "Word already has strikethrough applied, ignoring"
        );
        return;
      }
      const isAfterWhitespace = beforeCursor.length > 0 && /\s$/.test(beforeCursor);
      if (isAfterWhitespace) {
        this.handleStrikethroughAfterWhitespace(
          editor,
          cursor,
          line,
          beforeCursor
        );
        return;
      }
      this.handleStrikethroughAtCursor(
        editor,
        cursor,
        line,
        beforeCursor
      );
    } catch (error) {
      this.logger.error("Error applying strikethrough: ", error);
      new import_obsidian.Notice("Failed to apply strikethrough");
    }
  }
  /**
   * Check if there are strikethrough markers near the cursor
   */
  hasNearbyStrikethroughMarkers(text) {
    if (text.endsWith("~~"))
      return true;
    if (text.length >= 4 && text.substring(text.length - 4).includes("~~"))
      return true;
    return false;
  }
  /**
   * Handle strikethrough when cursor is after whitespace
   */
  handleStrikethroughAfterWhitespace(editor, cursor, line, beforeCursor) {
    const trimmedBeforeCursor = beforeCursor.trimEnd();
    if (this.hasNearbyStrikethroughMarkers(trimmedBeforeCursor)) {
      this.logger.debug("Word already has strikethrough, ignoring");
      return;
    }
    const lastSpaceIndex = trimmedBeforeCursor.lastIndexOf(" ");
    const wordStart = lastSpaceIndex === -1 ? 0 : lastSpaceIndex + 1;
    const wordEnd = trimmedBeforeCursor.length;
    const wordText = trimmedBeforeCursor.substring(wordStart);
    if (!wordText.trim())
      return;
    const strikethroughText = `~~${wordText}~~`;
    this.applyStrikethrough(
      editor,
      cursor,
      {
        line: cursor.line,
        ch: wordStart
      },
      {
        line: cursor.line,
        ch: wordEnd
      },
      strikethroughText
    );
    cursor.ch += 4;
    editor.setCursor(cursor);
  }
  /**
   * Handle strikethrough when cursor is on a word
   */
  handleStrikethroughAtCursor(editor, cursor, line, beforeCursor) {
    const lastWordMatch = beforeCursor.match(/(\s+)?([^\s]*)$/);
    let wordStart = 0;
    if (lastWordMatch && lastWordMatch.index !== void 0) {
      if (lastWordMatch[1]) {
        wordStart = lastWordMatch.index + lastWordMatch[1].length;
      } else {
        wordStart = lastWordMatch.index;
      }
    }
    const wordText = line.substring(wordStart, cursor.ch);
    if (!wordText.trim())
      return;
    if (this.hasStrikethroughInOrAroundWord(
      wordText,
      wordStart,
      cursor.ch,
      line
    )) {
      this.logger.debug("Word already has strikethrough, ignoring");
      return;
    }
    const strikethroughText = `~~${wordText}~~ `;
    this.applyStrikethrough(
      editor,
      cursor,
      {
        line: cursor.line,
        ch: wordStart
      },
      {
        line: cursor.line,
        ch: cursor.ch
      },
      strikethroughText
    );
    const newCursorCh = wordStart + strikethroughText.length;
    editor.setCursor({ line: cursor.line, ch: newCursorCh });
  }
  /**
   * Check if there are strikethrough markers in or around the word
   */
  hasStrikethroughInOrAroundWord(wordText, wordStart, wordEnd, line) {
    if (wordText.includes("~~"))
      return true;
    if (wordStart >= 2 && line.substring(wordStart - 2, wordStart) === "~~")
      return true;
    if (wordEnd + 2 <= line.length && line.substring(wordEnd, wordEnd + 2) === "~~")
      return true;
    return false;
  }
  /**
   * Apply strikethrough formatting to text
   */
  applyStrikethrough(editor, cursor, from, to, strikethroughText) {
    editor.replaceRange(strikethroughText, from, to);
  }
};
var Logger = class {
  constructor(level) {
    this.levels = {
      debug: 0,
      info: 1,
      warn: 2,
      error: 3
    };
    this.level = level;
  }
  shouldLog(messageLevel) {
    return this.levels[messageLevel] >= this.levels[this.level];
  }
  debug(...args) {
    if (this.shouldLog("debug")) {
      console.debug("[Pen Mode]", ...args);
    }
  }
  info(...args) {
    if (this.shouldLog("info")) {
      console.info("[Pen Mode]", ...args);
    }
  }
  warn(...args) {
    if (this.shouldLog("warn")) {
      console.warn("[Pen Mode]", ...args);
    }
  }
  error(...args) {
    if (this.shouldLog("error")) {
      console.error("[Pen Mode]", ...args);
    }
  }
};
var PenModeSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Pen Mode Settings" });
    new import_obsidian.Setting(containerEl).setName("Log Level").setDesc("Set the logging level for debugging").addDropdown(
      (dropdown) => dropdown.addOptions({
        debug: "Debug",
        info: "Info",
        warn: "Warning",
        error: "Error"
      }).setValue(this.plugin.settings.logLevel).onChange(
        async (value) => {
          this.plugin.settings.logLevel = value;
          await this.plugin.saveSettings();
        }
      )
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
